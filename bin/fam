#!/usr/bin/php5
<?php

/**
 * FAM - File Alteration Monitor for auto-generation of javascript and CSS
 * files.
 *
 * Files are listened for on an "inside-out" principle, determined by the
 * include_path - where the project's public paths are inferred. Apart from
 * the actual concatenated and compressed files, FAM generates an assets.json
 * file in the root directory, which has the following structure:
 *
 * {
 *     "projectname": {
 *         "project:" {
 *             "css": ["abcdabcdabcdabcdabcdabcdabcdabcd.12345.css"],
 *             "js": ["abcdabcdabcdabcdabcdabcdabcdabcd.12345.js"]
 *         },
 *         "monad": { //etc. }
 *     }
 * }
 *
 * Multiple subprojects may exists in one project, e.g. when there are two
 * separate domain-level project directories.
 *
 * The special vendor subpath is ignored, unless explicitly specified
 * (e.g. for monad) since these paths tend to contain vendor-supplied assets
 * we do not necessarily want to publish.
 */

namespace monolyth;
use Lurker\Event\FilesystemEvent;
use Lurker\ResourceWatcher;
use Project;

$base = realpath(__DIR__.'/../../../');
set_include_path(implode(PATH_SEPARATOR, [
    $base,
    "$base/vendor",
]));
require 'monolyth/Monolyth.php';
require 'monolyth/vendor/autoload.php';

$watcher = new ResourceWatcher;
$watcher->track('project', $base);

$assetdirs = [];
$setup = function($dir) use(&$setup) {
    $d = Dir($dir);
    while (false !== ($entry = $d->read())) {
        if ($entry{0} == '.') {
            continue;
        }
        if (is_dir("$dir/$entry")) {
            if (file_exists("$dir/$entry/config/assets.json")) {
                $assetdirs[] = "$dir/$entry";
                $assetdirs = array_unique($assetdirs);
            }
        }
    }
};

$watcher->addListener('project', function(FilesystemEvent $event) {
    $file = $event->getResource()->__toString();
    if ($file{0} == ',') {
        return;
    }
    $basename = basename($file);
    if ($basename == 'assets.json') {
        $path = realpath($file);
        $assetdirs[] = $path;
        $assetdirs = array_unique($assetdirs);
    } elseif (preg_match("@\.(js|css)$@", $basename)) {
        // Changed asset; rebuild.
        $d = Dir($base);
        while (false !== ($entry = $d->read())) {
            if ($entry{0} == '.') {
                continue;
            }
            if (!is_dir("$base/$entry")) {
                continue;
            }
            if (!preg_match("@^[a-z0-9-]+(\.\w{2,5}){1,2}$@", $entry)) {
                continue;
            }
            $project = preg_replace("@\W@", '', $entry);
            $ignore = $paths;
            $ignore[] = 'monad.css';
            $assets[$project]['css'] = array_unique(array_merge(
                $assets[$project]['css'],
                $get('css', $base, $ignore),
                $get('css', "$base/$entry", ['monad.css'])
            ));
            $assets[$project]['js'] = array_unique(array_merge(
                $assets[$project]['js'],
                $get('js', $base, $ignore),
                $get('js', "$base/$entry")
            ));
        }
    }
    if (!preg_match
    echo $event->getResource()."\n";
});
$watcher->start();

/**
 * First, build our initial file (on run) that tracks all associated stylesheets
 * and scripts.
 */
$get = function($type, $dir, array $ignore = []) use(&$get) {
    $ignore = array_unique(array_merge(
        $ignore,
        ['www', 'vendor', 'bower_components', 'node_modules', 'bin', 'config']
    ));
    $d = Dir($dir);
    $files = [];
    while (false !== ($entry = $d->read())) {
        if ($entry{0} == '.') {
            continue;
        }
        if (is_link("$dir/$entry")) {
            continue;
        }
        if (in_array($entry, $ignore)) {
            continue;
        }
        if (!is_dir("$dir/$entry")) {
            if (!preg_match("@\.$type$@", $entry)) {
                continue;
            }
            $files[] = "$dir/$entry";
        }
        if (is_dir("$dir/$entry")) {
            $files = array_merge($files, $get($type, "$dir/$entry", $ignore));
        }
    }
    return $files;
};

/*
 * Start with determining our project paths:
 */
$assets = [];
$base = isset($argv[1]) ? realpath($base) : $base;
$d = Dir($base);
$paths = [];
if (!isset($argv[2])) {
    while (false !== ($entry = $d->read())) {
        if ($entry{0} == '.') {
            continue;
        }
        if (!is_dir("$base/$entry")) {
            continue;
        }
        if (!preg_match("@^[a-z0-9-]+(\.\w{2,5}){1,2}$@", $entry)) {
            continue;
        }
        $project = preg_replace("@\W@", '', $entry);
        $paths[$project] = $entry;
        $assets[$project] = ['css' => [], 'js' => []];
    }
} else {
    $assets[$argv[2]] = ['css' => [], 'js' => []];
}
$d = Dir($base);
while (false !== ($entry = $d->read())) {
    if ($entry{0} == '.') {
        continue;
    }
    if (!is_dir("$base/$entry")) {
        continue;
    }
    if (!preg_match("@^[a-z0-9-]+(\.\w{2,5}){1,2}$@", $entry)) {
        continue;
    }
    $project = preg_replace("@\W@", '', $entry);
    $ignore = $paths;
    $ignore[] = 'monad.css';
    $assets[$project]['css'] = array_unique(array_merge(
        $assets[$project]['css'],
        $get('css', $base, $ignore),
        $get('css', "$base/$entry", ['monad.css'])
    ));
    $assets[$project]['js'] = array_unique(array_merge(
        $assets[$project]['js'],
        $get('js', $base, $ignore),
        $get('js', "$base/$entry")
    ));
}
$replace = null;
foreach ($assets as $project => &$group) {
    if (!isset($replace)) {
        $replace = $project;
    }
    set_include_path(implode(PATH_SEPARATOR, [
        "$base/{$paths[$project]}",
        $base,
        "$base/vendor",
    ]));
    $p = Project::instance();
    $p['public'] = "$base/{$paths[$project]}/www";
    if ($group['js']) {
        $script = new render\Script($p);
        call_user_func_array([$script, 'push'], $group['js']);
        $group['js'] = $script->getArrayCopy();
        foreach ($group['js'] as &$js) {
            $js = str_replace($replace, $project, $js);
        }
    }

    if ($group['css']) {
        $css = new render\Oldie_Css($p);
        call_user_func_array([$css, 'push'], $group['css']);
        $group['css'] = $css->getArrayCopy();
        foreach ($group['css'] as &$css) {
            $css = str_replace($replace, $project, $css);
        }
    }
}
file_put_contents("$base/assets.json", json_encode($assets));
//call_user_func_array([$Css, 'push'], $get('css', $base));


